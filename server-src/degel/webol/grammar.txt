(* A full line to be parsed *)
input-line = <whitespace>? (action | (!action bad-cmd) | progline) <whitespace>?

(* Immediate mode commands *)
<action> = clear-cmd | edit-cmd | help-cmd | list-cmd | manual-cmd | print-cmd |
           renumber-cmd | run-cmd | trace-cmd

clear-cmd     = <#"(?i)clear">
edit-cmd     = <#"(?i)edit"> <whitespace>? line-num
help-cmd     = <#"(?i)help">
list-cmd     = <#"(?i)list">
manual-cmd   = <(#"(?i)man"|#"(?i)manual")> (<whitespace> expr)*
print-cmd    = <#"(?i)print"> <whitespace>? expr-list
renumber-cmd = <#"(?i)renumber"> (<whitespace> line-num)?
run-cmd      = <#"(?i)run"> (<whitespace> line-num)?
trace-cmd    = <#"(?i)trace">

bad-cmd      = #"[a-zA-Z].*"

progline  = line-num <whitespace>? statement

statement = dim-statement | goto-statement | if-statement | let-statement|
            print-statement | rem-statement

dim-statement = <#"(?i)dim"> <whitespace>? var-list
goto-statement = <#"(?i)goto"> <whitespace>? line-num
if-statement = <#"(?i)if"> <whitespace>? condition <whitespace>? <#"(?i)then"> <whitespace>? statement
let-statement = <#"(?i)let">  <whitespace>? var <whitespace>? <"="> <whitespace>? expr
<print-statement> = print-cmd
rem-statement = <#"(?i)rem"> comment

condition = expr <whitespace>? cond-op <whitespace>? expr
<cond-op> = "==" | "!=" | "<" | "<=" | ">" | ">="

<var-list> = var | var-list <whitespace>? <","> <whitespace>? var

comment = #".*"

<expr-list> = expr | expr-list <whitespace>? <","> <whitespace>? expr
<expr> = quoted-string | arith

<quoted-string> = <dquote> string-with-embedded-dquotes <dquote>
<simple-string> = #"[^\"]*"
string-with-embedded-dquotes = simple-string | simple-string '""' string-with-embedded-dquotes

line-num = integer

(* Arithmetic expression parser *)
<arith> = add-sub
<add-sub> = mul-div | add | sub
add = add-sub <'+'> mul-div
sub = add-sub <'-'> mul-div
<mul-div> = term | mul | div
mul = mul-div <'*'> term
div = mul-div <'/'> term
<term> = atom | parens
parens = <'('> add-sub <')'>
<atom> = number | var
var = #'[A-Za-z][A-Za-z0-9]*'
<number> = integer | float
float = #'[0-9]*\.[0-9]+'
integer = #'[0-9]+'

(* Lexical items *)
dquote = '"'
squote = "'"
whitespace = #'\s+'

